# задача
# составьте словарь англо-русский (или любой другой словарь) из произвольных слов. Реализовать:
# ●	поиск русских слов и их значений в английском языке
# ●	поиск английских слов и их значений в русском языке
# ●	если нет совпадений, необходимо отдельно об этом сообщить пользователю

dict = {
    "медведь": "bear",
    "голубь": "pigeon",
    "береза": "birch",
    "человек": "person",
    "шкаф": "waredrobe",
    "тетрадь": "notebook",
    "красота": "beauty",
    "апельсин": "orange",
    "радость": "joy",
    "игрушка": "toy"
}
user_word = input("Введите слово ").lower()
if user_word in dict:
    print(f"{user_word} переводится как {dict[user_word]}")
elif user_word in list(dict.values()):
    for key, word in dict.items():
        if user_word == word:
            print(f"{user_word} переводится как {key}")
else:
    print("Такого слова нет в словаре")

# задача
# составьте словарь стран и городов каждой страны(Для каждой страны минимум два города должно быть, иначе страна и город должна совпадать (например {Люксембург: [Люксембург]})). Для каждого города укажите, в какой стране он находится. Если город и страна совпадают напечатайте “Город-государство : название_города-государства”
countries = {
    "Великобритания": ["Лондон", "Бирмингем"],
    "Ирландия": ["Уотерфорд", "Дублин"],
    "Германия": ["Хайдельберг", "Берлин"],
    "Нидерланды": ["Амстердам", "Гронинген"],
    "Бельгия": ["Брюссель", "Брюгге"],
    "Люксембург": ["Люксембург"],
    "Франция": ["Париж", "Страсбург"],
    "Монако": ["Монако"],
    "Австрия": ["Вена", "Зальцбург"],
    "Лихтенштейн": ["Вадуц", "Шан"],
    "Швейцария": ["Берн", "Цюрих"]
}
for country, city_list in countries.items():
    for city in city_list:
        if city == country:
            print(f"Город-государство {city}")
        else:
            print(f"Город {city} находится в стране {country}.")

# задача
# Создайте словарь всех покупателей и стоимости покупок (для каждого покупателя: стоимость покупки). найти для такого словаря:
# ●	максимальную стоимость покупки и кто совершил эту покупку
# ●	кол-во сделанных продаж

shop = {"Олег": 100, "Егор": 350, "Алина": 80, "Эдуард": 80, "Анастасия": 400, "Женя": 60, "Валерий": 320,
        "Николай": 400}
max_sell = 0
max_buyer = []
sells_count = 0
sells_sum = 0
for name, sum in shop.items():
    sells_sum = sells_sum + sum
    sells_count += 1
    if max_sell < sum:
        max_sell = sum
        max_buyer.clear()
        max_buyer.append(name)
    elif max_sell == sum:
        max_buyer.append(name)
print(f"Максимальная стоимость покупки - {max_sell}, покупатель(и) - ", end="")
print(*max_buyer, sep=" и ")
print(f"Всего сделано {sells_count} продаж на сумму {sells_sum}")

# задача
# Петя перешёл в другую школу. На уроке физкультуры ему понадобилось определить своё место в строю. Помогите ему это сделать.
# Программа получает на вход невозрастающую последовательность натуральных чисел, означающих рост каждого человека в строю. После этого вводится число X – рост Пети. Все числа во входных данных натуральные и не превышают 200.
# Выведите номер, под которым Петя должен встать в строй. Если в строю есть люди с одинаковым ростом, таким же, как у Пети, то он должен встать после них.
from random import randint

sport_class = []
for i in range(20):
    sport_class.append(randint(150, 200))
sport_class = sorted(sport_class, reverse=True)
print(sport_class)
number = 1
while True:
    try:
        petya = int(input("Введите рост Пети "))
        if petya <= 0:
            print("Рост не может быть меньше 0. Попробуйте ещё раз")
        else:
            break
    except ValueError:
        print("Неверное значение. Попробуйте ещё раз")
for student in sport_class:
    if petya <= student:
        number += 1
    else:
        break
print(f"Петя встанет на {number} место")

# задача
# Аня и Боря любят играть в разноцветные кубики, причем у каждого из них свой набор и в каждом наборе все кубики различны по цвету. Однажды дети заинтересовались, сколько существуют цветов таких, что кубики каждого цвета присутствуют в обоих наборах. Для этого они занумеровали все цвета случайными числами от 0 до 108. На этом их энтузиазм иссяк, поэтому вам предлагается помочь им в оставшейся части.
# В первой строке входных данных записаны числа N и M — число кубиков у Ани и Бори. В следующих N строках заданы номера цветов кубиков Ани. В последних M строках номера цветов Бори.
# Найдите три множества: номера цветов кубиков, которые есть в обоих наборах; номера цветов кубиков, которые есть только у Ани и номера цветов кубиков, которые есть только у Бори. Для каждого из множеств выведите сначала количество элементов в нем, а затем сами элементы, отсортированные по возрастанию.

from random import randint
color_num = list(range(109))
anya = set()
borya = set()
while True:
    try:
        n = int(input("Сколько кубиков у Ани? "))
        if n <= 0 or n >= 109:
            print("Неверное количество. Попробуйте ещё раз")
        else:
            break
    except ValueError:
        print("Неверное значение. Попробуйте ещё раз")
while True:
    try:
        m = int(input("Сколько кубиков у Бори? "))
        if m <= 0 or n >= 109:
            print("Неверное количество. Попробуйте ещё раз")
        else:
            break
    except ValueError:
        print("Неверное значение. Попробуйте ещё раз")
for i in range(n):
    while True:
        r = randint(0, 108)
        if r not in anya:
            anya.add(r)
            break
for i in range(m):
    while True:
        r = randint(0, 108)
        if r not in borya:
            borya.add(r)
            break
print(f"Кубики Ани: {sorted(anya)}\nКубики Бори: {sorted(borya)}")
if anya.intersection(borya):
    print("Кубики, которые есть и у Ани, и у Бори: ", end="")
    print(*sorted(anya.intersection(borya)), sep=", ")
    print("Кубики, которые есть только у Ани: ", end="")
    print(*sorted(set(borya ^ anya).intersection(anya)), sep=", ")
    print("Кубики, которые есть только у Бори: ", end="")
    print(*sorted(set(anya ^ borya).intersection(borya)), sep=", ")
else:
    print("Цвета кубиков Ани и Бори не совпадают")

