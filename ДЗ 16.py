# задача
# Дан текстовый файл. Написать функцию, которая будет подсчитывать количество чисел в строке,
# которые отделены пробелами, возвращаемое значение должно быть типа int. Применить эту функцию для файла и найти общее кол-во таких чисел

import re
def count_nums(something):
    something.seek(0)
    text = something.read()
    something.seek(0)
    num = re.findall(r" \d+ ", text)
    return len(num)

file = open("demo.txt", "r")
print(f"Количество чисел, отделённых пробелами: {count_nums(file)}")
file.close()

# задача
# Дан текстовый файл. Написать функцию, которая составляет шифр для цифр (шифр можете придумать свой, вот пример 1 → ! | 2 → @  | 3 → #  |  4 → $  и т.д.),
# возвращаемое значение должно быть типа string.
# Применить эту функция для файла и заменить все цифры на зашифрованные значения


def file_sipher(something):
    sipher = {}
    pics = ["♔", "♕", "♖", "♘", "♙", "♚", "♛", "♜", "♞", "♟"]
    for x in range(10):
        sipher[x] = pics[x]
    print(sipher)
    something.seek(0)
    text = something.read()
    something.seek(0)
    for num in sipher:
        text = text.replace(str(num), sipher[num])
    something.write(text)

file = open("demo.txt", "r+", encoding='UTF-8')
file_sipher(file)
file.close()


# задача
# Дан текстовый файл. Написать функцию, которая ищет упоминание о файле формата .txt. Функция должна возвращать имя такого файла без пробелов и  вместе с расширением .txt.
# Применить эту функция для файла и создать список с именами файлов

import re
def find_txt(something):
    something.seek(0)
    text = something.read()
    something.seek(0)
    text = re.findall(r"\b\S+.txt\b", text)
    return text

with open("demo.txt", "r") as file:
    print(find_txt(file))


# задача
# Системный администратор раз в неделю создаёт архив пользовательских файлов. Однако объём диска, куда он помещает архив, может быть меньше,
# чем суммарный объём архивируемых файлов. Известно, какой объём занимает файл каждого пользователя.
# По заданной информации об объёме файлов пользователей и свободном объёме на архивном диске определите максимальное число пользователей,
# чьи файлы можно сохранить в архиве, а также максимальный размер имеющегося файла, который может быть сохранён в архиве, при условии,
# что сохранены файлы максимально возможного числа пользователей.
#
# Входные данные.
# # https://inf-ege.sdamgia.ru/doc/inf/zadanie26/26_demo.txt
# В первой строке входного файла находятся два числа: S  — размер свободного места на диске (натуральное число, не превышающее 10 000)
# и N  — количество пользователей (натуральное число, не превышающее 1000). В следующих N строках находятся значения объёмов файлов
# каждого пользователя (все числа натуральные, не превышающие 100), каждое в отдельной строке.
# Запишите в ответе два числа: сначала наибольшее число пользователей, чьи файлы могут быть помещены в архив, затем максимальный размер имеющегося
# файла, который может быть сохранён в архиве, при условии, что сохранены файлы максимально возможного числа пользователей.
#
# Пример входного файла:
# 100 4
# 80
# 30
# 50
# 40
# При таких исходных данных можно сохранить файлы максимум двух пользователей. Возможные объёмы этих двух файлов 30 и 40, 30 и 50 или 40 и 50.
# Наибольший объём файла из перечисленных пар  — 50, поэтому ответ для приведённого примера: 2 50

import functools
def how_many_users():
    with open("demo.txt", "r") as file:
        data = file.readlines()
        free_space = int(data[0].split()[0])
        users_count = int(data[0].split()[1])
        data = list(map(lambda x: int(x[:-1]), data[1:]))
        saved_data = []
        max_size = 0
        max_users = 0
        for filesize in sorted(data):
            saved_data.append(filesize)
            if functools.reduce(lambda x, y: x + y, saved_data) <= free_space:
                max_size = filesize
                max_users += 1
            else:
                break
        print(f"Наибольший объём файла из перечисленных пар - {max_size}. Количество сохранённых пользователей - {max_users}")

how_many_users()